name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.2.6)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.PAT_TOKEN }}
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Validate version format
      run: |
        if ! [[ "${{ inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Error: Version must be in format X.Y.Z (e.g., 1.2.6)"
          exit 1
        fi

    - name: Check if version already exists
      run: |
        if git rev-parse "v${{ inputs.version }}" >/dev/null 2>&1; then
          echo "Error: Version v${{ inputs.version }} already exists"
          exit 1
        fi

    - name: Update version in setup.py
      run: |
        sed -i 's/version="[0-9.]*"/version="${{ inputs.version }}"/' setup.py
        git diff setup.py

    - name: Commit version bump
      run: |
        git add setup.py
        git commit -m "chore: bump version to ${{ inputs.version }}"

    - name: Create and push tag
      run: |
        git tag -a "v${{ inputs.version }}" -m "Release v${{ inputs.version }}"
        git push origin "v${{ inputs.version }}"

    - name: Create GitHub Release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create "v${{ inputs.version }}" \
          --title "v${{ inputs.version }}" \
          --generate-notes

    - name: Download release tarball and calculate SHA256
      run: |
        sleep 5  # Wait for GitHub to generate tarball
        curl -sL "https://github.com/${{ github.repository }}/archive/refs/tags/v${{ inputs.version }}.tar.gz" -o release.tar.gz
        SHA256=$(shasum -a 256 release.tar.gz | awk '{print $1}')
        echo "SHA256=${SHA256}" >> $GITHUB_ENV
        echo "Calculated SHA256: ${SHA256}"

    - name: Update Homebrew Formula
      run: |
        # Update only the URL and SHA256, keep everything else from current tagger.rb
        sed -i "s|url \"https://github.com/${{ github.repository }}/archive/refs/tags/v.*\.tar\.gz\"|url \"https://github.com/${{ github.repository }}/archive/refs/tags/v${{ inputs.version }}.tar.gz\"|" tagger.rb
        sed -i "s|sha256 \".*\"|sha256 \"${{ env.SHA256 }}\"|" tagger.rb

        git diff tagger.rb

    - name: Commit and push Formula update
      run: |
        git add tagger.rb
        git commit -m "chore: update tagger.rb with v${{ inputs.version }} SHA256"
        git push origin main

    - name: Release Summary
      run: |
        echo "âœ… Release v${{ inputs.version }} completed successfully!"
        echo ""
        echo "ðŸ“¦ Release URL: https://github.com/${{ github.repository }}/releases/tag/v${{ inputs.version }}"
        echo "ðŸ”‘ SHA256: ${{ env.SHA256 }}"
        echo ""
        echo "To install with Homebrew:"
        echo "  brew tap delphinus/delphinus"
        echo "  brew install tagger"
